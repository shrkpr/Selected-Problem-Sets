person *p = create_family(GENERATIONS);
void free_family(person *p);

int main(void)
{
    // Seed random number generator
    srandom(time(0));

    // Create a new family with three generations
    person *p = create_family(GENERATIONS);

    // Print family tree of blood types
    print_family(p, 0);

    // Free memory
    free_family(p);
}

void free_family(person *p)
{
    // TODO: Handle base case
    if (p == NULL)
    {
        return;
    }
    // TODO: Free parents recursively
    free_family(p->parents[0]);
    free_family(p->parents[1]);
    // TODO: Free child
    free(p);
}


Line 1 contains the variable p of type person that contains a pointer to their parents and their blood type

Line 2 is the function prototype for free_family and free.

Line 4 to 16 contains the main function which creates the family with three generations, prints it out, and thne frees it

Line 22 is the base case, where the last pointer of type person points to NULL. This indicates that we have reached the child node and we can stop the recusrion.

Line 26 to 28 frees the memory of both parents and then frees the child. If I freed the child first, I will lose the pointer to the parent, so I had to call free_family on the child's parents before freeing the child.