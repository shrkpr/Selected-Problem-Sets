const int GENERATIONS = 3;
person *create_family(int generations);
person *p = create_family(GENERATIONS);

person *create_family(int generations)
{
    person *newPerson = malloc(sizeof(person));
    if (newPerson == NULL)
    {
        printf("Memory allocation failed.\n");
        return NULL;
    }

    if (generations > 1)
    {
        // Create two new parents for current person by recursively calling create_family
        person *parent0 = create_family(generations - 1);
        person *parent1 = create_family(generations - 1);

        // TODO: Set parent pointers for current person
        newPerson->parents[0] = parent0;
        newPerson->parents[1] = parent1;
        // TODO: Randomly assign current person's alleles based on the alleles of their parents
        newPerson->alleles[0] = parent0->alleles[rand() % 2];
        newPerson->alleles[1] = parent1->alleles[rand() % 2];
    }

    else
    {
        // TODO: Set parent pointers to NULL
        newPerson->parents[0] = NULL;
        newPerson->parents[1] = NULL;

        // TODO: Randomly assign alleles
        newPerson->alleles[0] = random_allele();
        newPerson->alleles[1] = random_allele();
    }

    return newPerson;
}

Lines 1 to 3 contains the number of generations of the family, initialise create_family function prototype, we create a pointer p as a person struct that contains a newPerson

Lines 7 allocates some memory of size person for a new member of the family.

Lines 8 to 12 contains defensive code to stop the programme if there is insufficient memory.

Lines 16 to 18 generates two parents for the current person by recursively calling create_family and decrementing the generations by 1 - goes to the child. 

:omes 21 to 25 assigns the newPerson to point to their points in the struct and randomly assigns the current person's bloodtype based on their parents

Lines 31 to 32 sets the person at the bottom of the family tree to point to NULL as we have achieved the required number of generations

Lines 35 to 36 randomly assigns the bloodtype to the person at the bottom of the family tree.

Once the family is generated recursively, we achieved a linked list where each child is linked to their parents.
